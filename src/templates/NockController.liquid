
{%- if HasOperations -%}
{%- assign NockClassName = Class | prepend: 'Qqqqqq' | slice: 0, Class.size | append: "Nock" | slice: 6, 1000 -%}

{%- for operation in Operations -%}
{%-   if operation.Parameters.size > 0 -%}

{%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
{%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: NockClassName | append: 'Parameters' -%}
type {{ parameterClassName }} = {
  {%- for parameter in operation.Parameters -%}
    {%- if parameter.Type != 'FileParameter' -%}
  {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }};
    {%- endif -%}
  {%- endfor -%}
};

{%-   endif -%}
{%- endfor -%}

export const {{ NockClassName }} = {
{%- for operation in Operations -%}
{%- if operation.HttpMethodUpper == 'Get' or operation.HttpMethodUpper == 'Post' or operation.HttpMethodUpper == 'Put' -%}
  {%- assign ResultType = operation.ResultType -%}
  {%- assign UseInterfaceResult = false -%}
  {%- if ResultType != 'string' and ResultType != 'number' and ResultType != 'boolean' and ResultType != 'Date' and ResultType != 'void' -%}
    {%- assign firstResultSymbol = ResultType | slice: 0 -%}
    {%- assign lastSymbols = ResultType | slice: -2, 2 -%}
    {%- if firstResultSymbol != '{' and lastSymbols != '[]' -%}
      {%- assign OriginalResultType = ResultType -%}
      {%- assign ResultType = ResultType | prepend: 'I' -%}
      {%- assign UseInterfaceResult = true -%}
    {%- endif %}
  {%- endif %}
  {%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
  {%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: NockClassName | append: 'Parameters' -%}

  {{ operation.ActualOperationName }}: ({%- if operation.Parameters.size > 0 -%}queryParams: {{ parameterClassName }}, {% endif %}requestBody?: RequestBodyMatcher, interceptorOptions?: Options) => {
    {% template Path %}
    return nock(getBaseUrl())
      .{%- if operation.HttpMethodUpper == 'Get' -%}get
      {%- elsif operation.HttpMethodUpper == 'Post' -%}post
      {%- elsif operation.HttpMethodUpper == 'Put' -%}put
      {%- elsif operation.HttpMethodUpper == 'Patch' -%}patch
      {%- elsif operation.HttpMethodUpper == 'Delete' -%}delete{%- endif -%}(url, requestBody, interceptorOptions);
  },

  {% if ResultType != 'void' %}
  {{ operation.ActualOperationName }}Reply: ({%- if operation.Parameters.size > 0 -%}queryParams: {{ parameterClassName }}, {% endif %}response: {{ ResultType }}, removePreviousInterceptors = true, requestBody?: RequestBodyMatcher, interceptorOptions?: Options) => {
    const interceptor = {{ NockClassName }}.{{ operation.ActualOperationName }}({%- if operation.Parameters.size > 0 -%}queryParams, {% endif %}requestBody, interceptorOptions);
    if (removePreviousInterceptors) {
      removeInterceptor(interceptor);
    }
    return interceptor.reply(200, {% if UseInterfaceResult %}new {{ OriginalResultType  }}(response){% else %}response{% endif %});
  },
  {% endif %}
{% endif -%}
{% endfor -%}
}
{% endif -%}
