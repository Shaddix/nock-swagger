
{%- if HasOperations -%}
{%- assign NockClassName = Class | prepend: 'Qqqqqq' | slice: 0, Class.size | append: "Nock" | slice: 6, 1000 -%}

{%- for operation in Operations -%}
{%-   if operation.QueryParameters.size > 0 or operation.PathParameters.size > 0 -%}

{%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
{%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: NockClassName | append: 'Parameters' -%}
type {{ parameterClassName }} = {
  {%- for parameter in operation.QueryParameters -%}
  {{ parameter.VariableName }}?: {{ parameter.Type }}{{ parameter.TypePostfix }} | RegExp;
  {%- endfor -%}
  {%- for parameter in operation.PathParameters -%}
  {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }};
  {%- endfor -%}
};

{%-   endif -%}
{%- endfor -%}

export const {{ NockClassName }} = {
{%- for operation in Operations -%}
{%- if operation.HttpMethodUpper == 'Get' or operation.HttpMethodUpper == 'Post' or operation.HttpMethodUpper == 'Put' or operation.HttpMethodUpper == 'Patch' or operation.HttpMethodUpper == 'Delete' -%}
  {%- assign BodyParameterName = '' -%}
  {%- assign BodyParameterType = '' -%}
  {%- for parameter in operation.Parameters -%}
    {% if parameter.IsBody %}
      {%- assign BodyParameterName = parameter.VariableName -%}
      {%- assign BodyParameterType = parameter.Type | append: parameter.TypePostfix  -%}
    {% endif %}
  {%- endfor -%}

  {%- assign ResultType = operation.ResultType -%}
  {%- assign UseInterfaceResult = false -%}
  {%- if ResultType != 'string' and ResultType != 'number' and ResultType != 'boolean' and ResultType != 'Date' and ResultType != 'void' -%}
    {%- assign firstResultSymbol = ResultType | slice: 0 -%}
    {%- assign lastSymbols = ResultType | slice: -2, 2 -%}
    {%- if firstResultSymbol != '{' and lastSymbols != '[]' -%}
      {%- assign OriginalResultType = ResultType -%}
      {%- assign ResultType = ResultType | prepend: 'I' -%}
      {%- assign UseInterfaceResult = true -%}
    {%- endif %}
  {%- endif %}
  {%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
  {%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: NockClassName | append: 'Parameters' -%}

  {% if operation.HasDocumentation -%}
  /**
  {%     if operation.HasSummary -%}
   * {{ operation.Summary }}
  {%     endif -%}
  {%     if operation.IsDeprecated -%}
   * @deprecated
  {%     endif -%}
   */
  {% endif -%}
  {{ operation.ActualOperationName }}: (
  {%- if operation.QueryParameters.size > 0 or operation.PathParameters.size > 0 -%}queryParams: {{ parameterClassName }}, {%- endif -%}
  requestBody?:  {%- if BodyParameterType != '' -%}
    | string
    | Buffer
    | RegExp
    | DataMatcherArray
    | DataMatcherMap
    | {{ BodyParameterType }}
    | ((body: {{ BodyParameterType }}) => boolean),
  {%- else -%}
    RequestBodyMatcher,
  {%- endif -%}
  interceptorOptions?: Options & { preservePreviousInterceptors?: boolean }) : Omit<Interceptor, 'reply'> & {
	reply(
      replyFnWithCallback: (
        this: ReplyFnContext,
        uri: string,
        body: {{ BodyParameterType |  default: 'Body' }},
        callback: (
          err: NodeJS.ErrnoException | null,
          result: ReplyFnResultGeneric<{{ ResultType }}>
        ) => void
      ) => void
    ): Scope
    reply(
      replyFn: (
        this: ReplyFnContext,
        uri: string,
        body: {{ BodyParameterType |  default: 'Body' }},
      ) => ReplyFnResultGeneric<{{ ResultType }}> | Promise<ReplyFnResultGeneric<{{ ResultType }}>>
    ): Scope
    reply(
      statusCode: StatusCode,
      replyBodyFnWithCallback: (
        this: ReplyFnContext,
        uri: string,
        body: {{ BodyParameterType |  default: 'Body' }},
        callback: (err: NodeJS.ErrnoException | null, result: {{ ResultType }}) => void
      ) => void,
      headers?: ReplyHeaders
    ): Scope
    reply(
      statusCode: StatusCode,
      replyBodyFn: (
        this: ReplyFnContext,
        uri: string,
        body: {{ BodyParameterType |  default: 'Body' }},
      ) => {{ ResultType }} | Promise<{{ ResultType }}>,
      headers?: ReplyHeaders
    ): Scope
    reply(responseCode?: StatusCode, body?: {{ ResultType }}, headers?: ReplyHeaders): Scope
} => {
    {% template Path %}
    const interceptor = nock(getBaseUrl())
      .{%- if operation.HttpMethodUpper == 'Get' -%}get
{%- elsif operation.HttpMethodUpper == 'Post' -%}post
{%- elsif operation.HttpMethodUpper == 'Put' -%}put
{%- elsif operation.HttpMethodUpper == 'Patch' -%}patch
{%- elsif operation.HttpMethodUpper == 'Delete' -%}delete{%- endif -%}(new RegExp('^' + url_), requestBody as RequestBodyMatcher, interceptorOptions){%- if operation.QueryParameters.size > 0 -%}
      .query({
{%- for parameter in operation.QueryParameters -%}
          {{ parameter.VariableName }}: queryParams.{{ parameter.VariableName }} === null || queryParams.{{ parameter.VariableName }} === undefined ? /./
            : queryParams.{{ parameter.VariableName }} instanceof RegExp ? queryParams.{{ parameter.VariableName }} :
{%-     if parameter.IsDateOrDateTimeArray -%}
          queryParams.{{ parameter.VariableName }}.length > 1 ? queryParams.{{ parameter.VariableName }}.map(item_ => encodeURIComponent(item_ ? "" + item_.toJSON() : "null")) : encodeURIComponent("" + queryParams.{{ parameter.VariableName }})
{%-     elseif parameter.IsDateOrDateTime -%}
          encodeURIComponent(queryParams.{{ parameter.VariableName }}.toJSON()
{%-     elseif parameter.IsArray -%}
          queryParams.{{ parameter.VariableName }}.length > 1 ? queryParams.{{ parameter.VariableName }}.map(item => encodeURIComponent("" + item)) : encodeURIComponent("" + queryParams.{{ parameter.VariableName }})
{%-     else -%}
          encodeURIComponent("" + queryParams.{{ parameter.VariableName }})
{%-     endif -%},
{%- endfor -%}
      }){%- endif -%};
      if (!interceptorOptions?.preservePreviousInterceptors) {
        removeInterceptor(interceptor);
      }
      return interceptor as any;
  },


{% endif -%}
{% endfor -%}
}
{% endif -%}
